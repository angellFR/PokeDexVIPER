//
//  HomePokedexInteractor.swift
//  PokedexNew
//
//  Created Administrator on 10/06/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class HomePokedexInteractor: NSObject, URLSessionDelegate, URLSessionDataDelegate {
    //MARK: - Protocol Properties
    weak var presenter: HomePokedexPresenterProtocol?
    private var dataTask : URLSessionDataTask?
        private var responseData : Data = Data()
        private var httpResponse : HTTPURLResponse?
}

//MARK: - Interactor Methods
extension HomePokedexInteractor: HomePokedexInteractorProtocol {
    
    func getInitData() {
        let urlString = "https://pokedex-bb36f.firebaseio.com/pokemon.json"
        if let url = URL(string: urlString) {
            let session = URLSession(configuration: .default)
            
            let tarea = session.dataTask(with: url) { datos, respuesta, error in
                if error != nil {
                    print("error al obtener datos de la API")
                }
                if let datosSeguros = datos?.parseData(quitarStringg: "null,"){
                    if let listaPokemon = self.parsearJSON(datosPokemon: datosSeguros){
                        print("Lista Pokemon::::: ", listaPokemon)
                        self.presenter?.info(datos: listaPokemon)
                    }
                }
            }
            tarea.resume()
        }
    }
    func parsearJSON(datosPokemon: Data) -> [Pokemon]? {
        let decodificador = JSONDecoder()
        do{
            let datosDecodificados = try decodificador.decode([Pokemon].self, from: datosPokemon)
            return datosDecodificados
        }catch {
            print("Error al decodificar los datos: ")
            return nil
        }
    }
    
}


extension Data {
func parseData(quitarStringg palabra: String) -> Data? {
    let dataAsString = String(data: self, encoding: .utf8)
    let parseDataString = dataAsString?.replacingOccurrences(of: palabra, with: "")
    guard let data = parseDataString?.data(using: .utf8) else { return nil }
    return data
}
}
