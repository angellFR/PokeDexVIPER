//
//  HomePokedexViewController.swift
//  PokedexNew
//
//  Created Administrator on 10/06/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class HomePokedexViewController: UIViewController, UISearchResultsUpdating, UISearchControllerDelegate {
 
    //MARK: - Protocol Properties
	var presenter: HomePokedexPresenterProtocol?

    //MARK: - Properties
    var datosPokemon : [Pokemon] = []
    var pokemonSeleccionado : Pokemon?
    var searchBarPokemon = UISearchController()
//    var searchBarPokemon = UISearchBar()
    var pokemonFiltrados: [Pokemon] = []
     
    
    private var tablePokemon: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.register(celdaPokemonViewCell.self, forCellReuseIdentifier: "celdaPokemonViewCell")
//        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "pokemonCell")
        return tableView
    }()
    
    //MARK: - Life Cycle
	override func viewDidLoad() {
        super.viewDidLoad()
        title = "PokeDex"
        configUI()
        presenter?.getInitData()
        tablePokemon.dataSource = self
        tablePokemon.delegate = self
        searchBarPokemon.searchResultsUpdater = self
        navigationItem.searchController = searchBarPokemon
        searchBarPokemon.delegate = self
        
    }
    
    //MARK: - Methods
    func configUI() {
        view.addSubview(tablePokemon)
        NSLayoutConstraint.activate([
            tablePokemon.topAnchor.constraint(equalTo: view.topAnchor),
            tablePokemon.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tablePokemon.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tablePokemon.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}

//MARK: - View Methods
extension HomePokedexViewController: HomePokedexViewProtocol {

    func updateSearchResults(for searchController: UISearchController) {
        guard let text = searchController.searchBar.text else { return }
        print(text)
        pokemonFiltrados = []
        if text == "" {
            pokemonFiltrados = datosPokemon
        } else {
            for poke in datosPokemon {
                if poke.name.lowercased().contains(text.lowercased()){
                    pokemonFiltrados.append(poke)
                }
            }
        }
        self.tablePokemon.reloadData()
    }
}

//MARK: - Private functions
extension HomePokedexViewController: UITableViewDataSource, UITableViewDelegate {
    
    func info(datos: [Pokemon]) {
        datosPokemon = datos
        DispatchQueue.main.async {
            self.pokemonFiltrados = self.datosPokemon
            self.tablePokemon.reloadData()
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        return 10
        return pokemonFiltrados.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
//        let cell = tablePokemon.dequeueReusableCell(withIdentifier: "pokemonCell", for: indexPath)
//        cell.textLabel?.text = "Prueba"
        let cell = tableView.dequeueReusableCell(withIdentifier: "celdaPokemonViewCell", for: indexPath) as! celdaPokemonViewCell
        cell.configure(model: pokemonFiltrados[indexPath.row])
//        cell.textLabel?.text = datosPokemon[indexPath.row].name
        cell.layer.masksToBounds = true
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        pokemonSeleccionado = pokemonFiltrados[indexPath.row]
        print("pokemon seleccionado::::: \(pokemonSeleccionado)")
        guard let pokemonDetail = pokemonSeleccionado else { return }
        presenter?.pokemonSeleccionado(pokemonSeleccionado: pokemonDetail)
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
 
    
}
